/**
 * Merchant APIs
 * Technical document APIs for Merchant APIs
 *
 * The version of the OpenAPI document: 6.0
 * Contact: duong.vu@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseMarkUseMultipleSchemaV60DataInner from './ResponseMarkUseMultipleSchemaV60DataInner';

/**
 * The ResponseMarkUseMultipleSchemaV60 model module.
 * @module model/ResponseMarkUseMultipleSchemaV60
 * @version 6.0
 */
class ResponseMarkUseMultipleSchemaV60 {
    /**
     * Constructs a new <code>ResponseMarkUseMultipleSchemaV60</code>.
     * @alias module:model/ResponseMarkUseMultipleSchemaV60
     */
    constructor() { 
        
        ResponseMarkUseMultipleSchemaV60.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResponseMarkUseMultipleSchemaV60</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseMarkUseMultipleSchemaV60} obj Optional instance to populate.
     * @return {module:model/ResponseMarkUseMultipleSchemaV60} The populated <code>ResponseMarkUseMultipleSchemaV60</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseMarkUseMultipleSchemaV60();

            if (data.hasOwnProperty('success')) {
                obj['success'] = ApiClient.convertToType(data['success'], 'Boolean');
            }
            if (data.hasOwnProperty('return_code')) {
                obj['return_code'] = ApiClient.convertToType(data['return_code'], 'String');
            }
            if (data.hasOwnProperty('message_en')) {
                obj['message_en'] = ApiClient.convertToType(data['message_en'], 'String');
            }
            if (data.hasOwnProperty('message_vi')) {
                obj['message_vi'] = ApiClient.convertToType(data['message_vi'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [ResponseMarkUseMultipleSchemaV60DataInner]);
            }
            if (data.hasOwnProperty('transaction_id')) {
                obj['transaction_id'] = ApiClient.convertToType(data['transaction_id'], 'String');
            }
            if (data.hasOwnProperty('bill_number')) {
                obj['bill_number'] = ApiClient.convertToType(data['bill_number'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseMarkUseMultipleSchemaV60</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseMarkUseMultipleSchemaV60</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['return_code'] && !(typeof data['return_code'] === 'string' || data['return_code'] instanceof String)) {
            throw new Error("Expected the field `return_code` to be a primitive type in the JSON string but got " + data['return_code']);
        }
        // ensure the json data is a string
        if (data['message_en'] && !(typeof data['message_en'] === 'string' || data['message_en'] instanceof String)) {
            throw new Error("Expected the field `message_en` to be a primitive type in the JSON string but got " + data['message_en']);
        }
        // ensure the json data is a string
        if (data['message_vi'] && !(typeof data['message_vi'] === 'string' || data['message_vi'] instanceof String)) {
            throw new Error("Expected the field `message_vi` to be a primitive type in the JSON string but got " + data['message_vi']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                ResponseMarkUseMultipleSchemaV60DataInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['transaction_id'] && !(typeof data['transaction_id'] === 'string' || data['transaction_id'] instanceof String)) {
            throw new Error("Expected the field `transaction_id` to be a primitive type in the JSON string but got " + data['transaction_id']);
        }
        // ensure the json data is a string
        if (data['bill_number'] && !(typeof data['bill_number'] === 'string' || data['bill_number'] instanceof String)) {
            throw new Error("Expected the field `bill_number` to be a primitive type in the JSON string but got " + data['bill_number']);
        }

        return true;
    }


}



/**
 * @member {Boolean} success
 */
ResponseMarkUseMultipleSchemaV60.prototype['success'] = undefined;

/**
 * Result code if failed. Default is null
 * @member {String} return_code
 */
ResponseMarkUseMultipleSchemaV60.prototype['return_code'] = undefined;

/**
 * Message notification in English
 * @member {String} message_en
 */
ResponseMarkUseMultipleSchemaV60.prototype['message_en'] = undefined;

/**
 * Message notification in Vietnamese
 * @member {String} message_vi
 */
ResponseMarkUseMultipleSchemaV60.prototype['message_vi'] = undefined;

/**
 * Detail items of voucher, if result is failed, response will return the first voucher code which is invalid
 * @member {Array.<module:model/ResponseMarkUseMultipleSchemaV60DataInner>} data
 */
ResponseMarkUseMultipleSchemaV60.prototype['data'] = undefined;

/**
 * Transaction ID (if mark used successfully)
 * @member {String} transaction_id
 */
ResponseMarkUseMultipleSchemaV60.prototype['transaction_id'] = undefined;

/**
 * Bill number that vouchers were marked as used for.
 * @member {String} bill_number
 */
ResponseMarkUseMultipleSchemaV60.prototype['bill_number'] = undefined;






export default ResponseMarkUseMultipleSchemaV60;

