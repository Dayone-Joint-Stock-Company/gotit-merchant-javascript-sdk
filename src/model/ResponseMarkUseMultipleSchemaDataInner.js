/**
 * Merchant APIs
 * Technical document APIs for Merchant APIs
 *
 * The version of the OpenAPI document: 6.0
 * Contact: duong.vu@gotit.vn
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ResponseCheckMultipleSchemaDataInnerConditions from './ResponseCheckMultipleSchemaDataInnerConditions';
import ResponseMarkUseMultipleSchemaDataInnerRedemptions from './ResponseMarkUseMultipleSchemaDataInnerRedemptions';

/**
 * The ResponseMarkUseMultipleSchemaDataInner model module.
 * @module model/ResponseMarkUseMultipleSchemaDataInner
 * @version 1.0.2
 */
class ResponseMarkUseMultipleSchemaDataInner {
    /**
     * Constructs a new <code>ResponseMarkUseMultipleSchemaDataInner</code>.
     * @alias module:model/ResponseMarkUseMultipleSchemaDataInner
     */
    constructor() { 
        
        ResponseMarkUseMultipleSchemaDataInner.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ResponseMarkUseMultipleSchemaDataInner</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ResponseMarkUseMultipleSchemaDataInner} obj Optional instance to populate.
     * @return {module:model/ResponseMarkUseMultipleSchemaDataInner} The populated <code>ResponseMarkUseMultipleSchemaDataInner</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ResponseMarkUseMultipleSchemaDataInner();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'Number');
            }
            if (data.hasOwnProperty('product_id')) {
                obj['product_id'] = ApiClient.convertToType(data['product_id'], 'Number');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'Number');
            }
            if (data.hasOwnProperty('voucher_type')) {
                obj['voucher_type'] = ApiClient.convertToType(data['voucher_type'], 'String');
            }
            if (data.hasOwnProperty('conditions')) {
                obj['conditions'] = ResponseCheckMultipleSchemaDataInnerConditions.constructFromObject(data['conditions']);
            }
            if (data.hasOwnProperty('redemptions')) {
                obj['redemptions'] = ResponseMarkUseMultipleSchemaDataInnerRedemptions.constructFromObject(data['redemptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ResponseMarkUseMultipleSchemaDataInner</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ResponseMarkUseMultipleSchemaDataInner</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['voucher_type'] && !(typeof data['voucher_type'] === 'string' || data['voucher_type'] instanceof String)) {
            throw new Error("Expected the field `voucher_type` to be a primitive type in the JSON string but got " + data['voucher_type']);
        }
        // validate the optional field `conditions`
        if (data['conditions']) { // data not null
          ResponseCheckMultipleSchemaDataInnerConditions.validateJSON(data['conditions']);
        }
        // validate the optional field `redemptions`
        if (data['redemptions']) { // data not null
          ResponseMarkUseMultipleSchemaDataInnerRedemptions.validateJSON(data['redemptions']);
        }

        return true;
    }


}



/**
 * Voucher code
 * @member {String} code
 */
ResponseMarkUseMultipleSchemaDataInner.prototype['code'] = undefined;

/**
 * Value of voucher
 * @member {Number} value
 */
ResponseMarkUseMultipleSchemaDataInner.prototype['value'] = undefined;

/**
 * Product ID
 * @member {Number} product_id
 */
ResponseMarkUseMultipleSchemaDataInner.prototype['product_id'] = undefined;

/**
 * State of voucher
 * @member {Number} state
 */
ResponseMarkUseMultipleSchemaDataInner.prototype['state'] = undefined;

/**
 * Voucher type, standard or conditional
 * @member {String} voucher_type
 */
ResponseMarkUseMultipleSchemaDataInner.prototype['voucher_type'] = undefined;

/**
 * @member {module:model/ResponseCheckMultipleSchemaDataInnerConditions} conditions
 */
ResponseMarkUseMultipleSchemaDataInner.prototype['conditions'] = undefined;

/**
 * @member {module:model/ResponseMarkUseMultipleSchemaDataInnerRedemptions} redemptions
 */
ResponseMarkUseMultipleSchemaDataInner.prototype['redemptions'] = undefined;






export default ResponseMarkUseMultipleSchemaDataInner;

